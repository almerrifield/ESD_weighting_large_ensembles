#!/usr/bin/env python3
# -*- coding: utf-8 -*-

""""

(c) 2019 under a MIT License (https://mit-license.org)

To run:

python ESD_fig3_med_box.py -p /home/meranna/python/temp/ CMIP5_med_9P_v0.nc CMIP5-ALL_med_9P_v0.nc CMIP5_med_9P_v0.nc CMIP5-ALL_med_9P_v0.nc CMIP5_med_9P_v0.nc CMIP5-ALL_med_9P_v0.nc CMIP5_med_9P_v0.nc CMIP5-ALL_med_9P_v0.nc CMIP5_med_9P_v0.nc CMIP5-ALL_med_9P_v0.nc -u -s box_MED_9P.png

"""


import os
import argparse
import numpy as np
import xarray as xr
import matplotlib.pyplot as plt
import seaborn as sns

from utils_python.xarray import area_weighted_mean
from boxplot import boxplot

SAVEPATH = '../../plots/boxplots'


def read_input():
    """Read the given configuration from the config file"""
    parser = argparse.ArgumentParser(
        description=__doc__,
        formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument(
        dest='filenames', nargs='+', type=str,
        help='')
    parser.add_argument(
        '--path', '-p', dest='path', type=str, default='',
        help='')
    parser.add_argument(
        '--no-unweighted', '-u', dest='unweighted', action='store_false',
        help='')
    parser.add_argument(
        '--title', '-t', dest='title', type=str, default=None,
        help='')
    parser.add_argument(
        '--savename', '-s', dest='savename', type=str, default=None,
        help='')
    args = parser.parse_args()
    return args


def read_data(filename, path):
    ds = xr.open_dataset(os.path.join(path, filename))
    ds = area_weighted_mean(ds)

    # for CMIP5-ALL_med_9P_v0.nc
    ds['weights_ic_all'] = [0.0306498936112816, 0.0391448485764449, 0.000412880542569758, 0.00107991659481872, 0.00107991659481872, 0.00107991659481872, 0.00107991659481872, 0.00107991659481872, 0.00107991659481872, 0.00979905036521699, 0.00637405217366092, 0.00637405217366092, 0.00637405217366092, 0.000133208267797779, 0.000133208267797779, 0.000133208267797779, 0.000133208267797779, 0.000133208267797779, 0.000133208267797779, 0.000133208267797779, 0.000133208267797779, 0.000133208267797779, 0.000133208267797779, 0.000133208267797779, 0.000133208267797779, 0.000133208267797779, 0.000133208267797779, 0.000133208267797779, 0.000133208267797779, 0.000133208267797779, 0.000133208267797779, 0.000133208267797779, 0.000133208267797779, 0.000133208267797779, 0.000133208267797779, 0.000133208267797779, 0.000133208267797779, 0.000133208267797779, 0.000133208267797779, 0.000133208267797779, 0.000133208267797779, 0.000133208267797779, 0.000133208267797779, 0.000133208267797779, 0.000133208267797779, 0.000133208267797779, 0.000133208267797779, 0.000133208267797779, 0.000133208267797779, 0.000133208267797779, 0.000133208267797779, 0.000133208267797779, 0.000133208267797779, 0.000133208267797779, 0.000133208267797779, 0.000133208267797779, 0.000133208267797779, 0.000133208267797779, 0.000133208267797779, 0.000133208267797779, 0.000133208267797779, 0.000133208267797779, 0.000133208267797779, 0.00665379138213003, 0.0281684808990121, 0.0614801788762348, 0.0139972063232535, 0.0139972063232535, 0.0139972063232535, 0.0139972063232535, 0.0139972063232535, 0.000710470681476458, 0.000710470681476458, 0.000710470681476458, 0.000710470681476458, 0.000710470681476458, 0.000710470681476458, 0.000710470681476458, 0.000710470681476458, 0.000710470681476458, 0.000710470681476458, 0.000147220282127516, 0.000147220282127516, 0.000147220282127516, 0.000147220282127516, 0.000147220282127516, 0.000147220282127516, 0.000147220282127516, 0.000147220282127516, 0.000147220282127516, 0.000147220282127516, 0.000147220282127516, 0.000147220282127516, 0.000147220282127516, 0.000147220282127516, 0.000147220282127516, 0.000147220282127516, 0.000147220282127516, 0.000147220282127516, 0.000147220282127516, 0.000147220282127516, 0.000147220282127516, 0.000147220282127516, 0.000147220282127516, 0.000147220282127516, 0.000147220282127516, 0.000147220282127516, 0.000147220282127516, 0.000147220282127516, 0.000147220282127516, 0.000147220282127516, 0.000147220282127516, 0.000147220282127516, 0.000147220282127516, 0.000147220282127516, 0.000147220282127516, 0.000147220282127516, 0.000147220282127516, 0.000147220282127516, 0.000147220282127516, 0.000147220282127516, 0.000147220282127516, 0.000147220282127516, 0.000147220282127516, 0.000147220282127516, 0.000147220282127516, 0.000147220282127516, 0.000147220282127516, 0.000147220282127516, 0.000147220282127516, 0.000147220282127516, 0.00125879282299671, 0.00125879282299671, 0.00125879282299671, 0.00125879282299671, 0.00125879282299671, 0.0170988328647253, 0.0170988328647253, 0.0170988328647253, 0.0170988328647253, 0.0170988328647253, 0.0289160324694173, 0.00117020740708971, 0.00117020740708971, 0.00117020740708971, 0.0194950592035346, 0.00199152893081816, 0.000136576952445064, 0.0154925503807138, 0.0100360852066653, 0.0219662147817345, 0.0178402980037795, 0.0100360852066653, 0.0178402980037795, 0.0264391154516917, 0.00931062472382337, 0.0225549594485357, 0.00894476758728697, 0.00931062472382337, 0.00894476758728697, 0.0306318927945253, 0.0491376700487571, 0.00881383469632304, 0.00881383469632304, 0.00881383469632304, 0.00881383469632304, 0.00444698964579276, 0.00444698964579276, 0.00444698964579276, 0.00444698964579276, 0.0398942009239250, 0.00816167221145302, 0.00469211374490190, 0.00552942006092372, 0.00352896874131218, 0.00352896874131218, 0.00352896874131218, 0.0107981283433813, 0.0107981283433813, 0.0107981283433813, 0.0360523995255677, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.000145514276845206, 0.0191301244960145, 0.0136540976648741, 0.0193373418176255, 0.00841189054061916, 0.00271082723842561, 0.0132330275876382, 0.0212700194457166]
    ds['weights_ic_all'] = ds['weights_ic_all']/ds['weights_ic_all'].sum()

    ds['weights_mc_all'] = [0.0390667137981572, 0.0390667137981572, 0.000924418400802522, 0.000273066666975135, 0.000273066666975135, 0.000273066666975135, 0.000273066666975135, 0.000273066666975135, 0.000273066666975135, 0.000273066666975135, 0.000273066666975135, 0.000273066666975135, 0.000273066666975135, 0.000273066666975135, 0.000273066666975135, 0.000273066666975135, 0.000273066666975135, 0.000273066666975135, 0.000273066666975135, 0.000273066666975135, 0.000273066666975135, 0.000273066666975135, 0.000273066666975135, 0.000273066666975135, 0.000273066666975135, 0.000273066666975135, 0.000273066666975135, 0.000273066666975135, 0.000273066666975135, 0.000273066666975135, 0.000273066666975135, 0.000273066666975135, 0.000273066666975135, 0.000273066666975135, 0.000273066666975135, 0.000273066666975135, 0.000273066666975135, 0.000273066666975135, 0.000273066666975135, 0.000273066666975135, 0.000273066666975135, 0.000273066666975135, 0.000273066666975135, 0.000273066666975135, 0.000273066666975135, 0.000273066666975135, 0.000273066666975135, 0.000273066666975135, 0.000273066666975135, 0.000273066666975135, 0.000273066666975135, 0.000273066666975135, 0.000273066666975135, 0.000273066666975135, 0.000273066666975135, 0.000273066666975135, 0.000273066666975135, 0.000273066666975135, 0.000273066666975135, 0.000273066666975135, 0.000273066666975135, 0.000273066666975135, 0.000273066666975135, 0.0239573620813699, 0.0239573620813699, 0.0239573620813699, 0.0313390284863299, 0.0313390284863299, 0.0313390284863299, 0.0313390284863299, 0.0313390284863299, 0.00159070748914398, 0.00159070748914398, 0.00159070748914398, 0.00159070748914398, 0.00159070748914398, 0.00159070748914398, 0.00159070748914398, 0.00159070748914398, 0.00159070748914398, 0.00159070748914398, 0.000295704465229955, 0.000295704465229955, 0.000295704465229955, 0.000295704465229955, 0.000295704465229955, 0.000295704465229955, 0.000295704465229955, 0.000295704465229955, 0.000295704465229955, 0.000295704465229955, 0.000295704465229955, 0.000295704465229955, 0.000295704465229955, 0.000295704465229955, 0.000295704465229955, 0.000295704465229955, 0.000295704465229955, 0.000295704465229955, 0.000295704465229955, 0.000295704465229955, 0.000295704465229955, 0.000295704465229955, 0.000295704465229955, 0.000295704465229955, 0.000295704465229955, 0.000295704465229955, 0.000295704465229955, 0.000295704465229955, 0.000295704465229955, 0.000295704465229955, 0.000295704465229955, 0.000295704465229955, 0.000295704465229955, 0.000295704465229955, 0.000295704465229955, 0.000295704465229955, 0.000295704465229955, 0.000295704465229955, 0.000295704465229955, 0.000295704465229955, 0.000295704465229955, 0.000295704465229955, 0.000295704465229955, 0.000295704465229955, 0.000295704465229955, 0.000295704465229955, 0.000295704465229955, 0.000295704465229955, 0.000295704465229955, 0.000295704465229955, 0.000295704465229955, 0.000295704465229955, 0.000295704465229955, 0.000295704465229955, 0.000295704465229955, 0.0382834115505173, 0.0382834115505173, 0.0382834115505173, 0.0382834115505173, 0.0382834115505173, 0.0647415165814365, 0.00262003448536538, 0.00262003448536538, 0.00262003448536538, 0.00537923997887741, 0.00537923997887741, 0.00537923997887741, 0.00421326541590348, 0.00421326541590348, 0.00421326541590348, 0.00421326541590348, 0.00421326541590348, 0.00421326541590348, 0.00421326541590348, 0.00421326541590348, 0.00421326541590348, 0.00421326541590348, 0.00421326541590348, 0.00421326541590348, 0.0137316545499640, 0.0137316545499640, 0.0137316545499640, 0.0137316545499640, 0.0137316545499640, 0.0137316545499640, 0.00741388764351201, 0.00741388764351201, 0.00741388764351201, 0.00741388764351201, 0.00741388764351201, 0.00741388764351201, 0.00375984457450244, 0.00375984457450244, 0.00375984457450244, 0.00375984457450244, 0.00375984457450244, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.000328799719067376, 0.0183505488251501, 0.0183505488251501, 0.0155322777143053, 0.0155322777143053, 0.00892436871038025, 0.00892436871038025, 0.0476224847958918]
    ds['weights_mc_all'] = ds['weights_mc_all']/ds['weights_mc_all'].sum()

    ds['weights_q_norm_all'] = ds['weights_q']/ds['weights_q'].sum()
    ds['weights_none_all'] = np.ones(288)/288

    ds['weights_ic'] = [0.0140339967740686, 0.0178654487311369, 0.000210302156713192, 0.000515809393998982, 0.000515809393998982, 0.000515809393998982, 0.000515809393998982, 0.000515809393998982, 0.000515809393998982, 0.00458976973766726, 0.00298228443567221, 0.00298228443567221, 0.00298228443567221, 0.00310444283674798, 0.0131891308489770, 0.0284861601330155, 0.00635297383168565, 0.00635297383168565, 0.00635297383168565, 0.00635297383168565, 0.00635297383168565, 0.000329624231026383, 0.000329624231026383, 0.000329624231026383, 0.000329624231026383, 0.000329624231026383, 0.000329624231026383, 0.000329624231026383, 0.000329624231026383, 0.000329624231026383, 0.000329624231026383, 0.000579360270382479, 0.000579360270382479, 0.000579360270382479, 0.000579360270382479, 0.000579360270382479, 0.00698767794336135, 0.00698767794336135, 0.00698767794336135, 0.00698767794336135, 0.00698767794336135, 0.00698767794336135, 0.000552791371608343, 0.000552791371608343, 0.000552791371608343, 0.00926287211927062, 0.00100137048089641, 7.65217240752083e-05, 0.00729264684946363, 0.00467439831770549, 0.0101799902432345, 0.00825362211846436, 0.00467439831770549, 0.00825362211846436, 0.0121236966293752, 0.00434459425161063, 0.0105525268947770, 0.00422843102259940, 0.00434459425161063, 0.00422843102259940, 0.0140000340672880, 0.0221904157052906, 0.00403707358817109, 0.00403707358817109, 0.00403707358817109, 0.00403707358817109, 0.00202973315111198, 0.00202973315111198, 0.00202973315111198, 0.00202973315111198, 0.0180901613072435, 0.00378795537800128, 0.00220108418241656, 0.00256204931982498, 0.00162613209617560, 0.00162613209617560, 0.00162613209617560, 0.00504960668064616, 0.00504960668064616, 0.00504960668064616, 0.0165779411890502, 0.00880913338401020, 0.00637829160577958, 0.00888171831567428, 0.00398178829276437, 0.00132879905976752, 0.00638567088192441, 0.00975534657615189]
    ds['weights_ic'] = ds['weights_ic']/ds['weights_ic'].sum()

    ds['weights_mc'] = [0.00797486137630137, 0.00797486137630137, 0.000210302156713192, 0.000499994678426805, 0.000499994678426805, 0.000499994678426805, 0.000499994678426805, 0.000499994678426805, 0.000499994678426805, 0.000499994678426805, 0.000499994678426805, 0.000499994678426805, 0.000499994678426805, 0.00497552597986006, 0.00497552597986006, 0.00497552597986006, 0.00635297383168565, 0.00635297383168565, 0.00635297383168565, 0.00635297383168565, 0.00635297383168565, 0.000329624231026383, 0.000329624231026383, 0.000329624231026383, 0.000329624231026383, 0.000329624231026383, 0.000329624231026383, 0.000329624231026383, 0.000329624231026383, 0.000329624231026383, 0.000329624231026383, 0.000579360270382479, 0.000579360270382479, 0.000579360270382479, 0.000579360270382479, 0.000579360270382479, 0.00698767794336135, 0.00698767794336135, 0.00698767794336135, 0.00698767794336135, 0.00698767794336135, 0.00698767794336135, 0.000552791371608343, 0.000552791371608343, 0.000552791371608343, 0.00114897381380469, 0.00114897381380469, 0.00114897381380469, 0.000876062801794235, 0.000876062801794235, 0.000876062801794235, 0.000876062801794235, 0.000876062801794235, 0.000876062801794235, 0.000876062801794235, 0.000876062801794235, 0.000876062801794235, 0.000876062801794235, 0.000876062801794235, 0.000876062801794235, 0.00279954519953656, 0.00279954519953656, 0.00279954519953656, 0.00279954519953656, 0.00279954519953656, 0.00279954519953656, 0.00150982908619546, 0.00150982908619546, 0.00150982908619546, 0.00150982908619546, 0.00150982908619546, 0.00150982908619546, 0.000775932894712877, 0.000775932894712877, 0.000775932894712877, 0.000775932894712877, 0.000775932894712877, 0.00387652508217910, 0.00387652508217910, 0.00387652508217910, 0.00387652508217910, 0.00379685624744744, 0.00379685624744744, 0.00321587665210966, 0.00321587665210966, 0.00192861748542298, 0.00192861748542298, 0.00975534657615189]
    ds['weights_mc'] = ds['weights_mc']/ds['weights_mc'].sum()

    ds['weights_q_norm'] = ds['weights_q']/ds['weights_q'].sum()
    ds['weights_none'] = np.ones(88)/88


    return ds


def main():
    args = read_input()

    fig, ax = plt.subplots(figsize=(7, 5))
    fig.subplots_adjust(left=0.2, right=0.8, bottom=.22, top=.91)

    xticks = []
    xticklabels = ['equal','equal','performance','performance', '1/N, ic members','1/N, ic members', '1/N, models','1/N, models', 'RMSE','RMSE']
    colors = ['blue','0.65','blue','0.65','blue','0.65','blue','0.65','blue','0.65']
    weights = ['weights_none','weights_none_all','weights_q_norm','weights_q_norm_all','weights_ic','weights_ic_all','weights_mc','weights_mc_all','weights','weights']

    for xx, filename in enumerate(args.filenames):
        if filename == '':
            continue

        ds = read_data(filename, args.path)

        varn = ds.attrs['target']
        xticks.append(xx)
        xticklabels.append(ds.attrs['config'])

        if args.unweighted:
            h1 = boxplot(
                ax, xx,
                mean=ds[varn],
                box=ds[varn],
                whis=ds[varn],  # (ds[varn].min(), ds[varn].max()),
                width=.8,
                color=colors[xx], # sns.xkcd_rgb['greyish'],
                alpha=.3,
            )

        h2 = boxplot(
            ax, xx,
            mean=ds[varn],
            box=ds[varn],
            whis=ds[varn],
            weights=ds[weights[xx]],
            width=.6,
            color=colors[xx],
            alpha=1,
        )

    ax.set_xticks(xticks)
    ax.set_xticklabels(xticklabels, rotation=30, ha='center')

    try:
        unit = f' ({ds[varn].attrs["units"]})'
    except KeyError:
        unit = ''
    ax.set_ylabel('SAT $\Delta$ ($\degree$C)')
    ax.set_ylim([2, 9])
    #plt.gca().set_aspect('equal', adjustable='box')

    if args.title is not None:
        plt.title(args.title)

    if args.savename is None:
        plt.show()
    else:
        plt.savefig(os.path.join(SAVEPATH, args.savename), dpi=300)


if __name__ == '__main__':
    main()
